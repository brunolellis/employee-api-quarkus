swagger: "2.0"
info:
  description: "Details about the `employee` REST API"
  version: "1.0.0"
  title: "Employee REST Service"
host: "localhost:8080"
schemes:
  - http
tags:
  - name: "employees"
consumes:
  - "application/json"
produces:
  - "application/json"
paths:
  /api/v1/employees:
    post:
      tags:
        - "employees"
      summary: "Adds an active employee"
      parameters:
      - in: "body"
        name: "body"
        description: "Employee object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/EmployeeRequest"
      responses:
        201:
          description: "Employee has been created successfully"
          schema:
            $ref: "#/definitions/EmployeeResponse"
        400:
          description: "Validation error(s)"
          schema:
            $ref: "#/definitions/ApiErrorResponse"

    get:
      tags:
        - "employees"
      summary: "Finds all active employees"
      parameters:
        - name: "page"
          in: "query"
          description: "current page - starting from 0"
          required: false
          type: "integer"
          format: "int32"
        - name: "size"
          in: "query"
          description: "number of elements on each page"
          required: false
          type: "integer"
          format: "int32"
        - name: "sort"
          in: "query"
          description: "number of elements (e.g. 'id,desc')"
          required: false
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/EmployeePageableResponse"

  /api/v1/employees/{id}:
    get:
      tags:
        - "employees"
      summary: "Finds an active employee by its id"
      parameters:
        - name: "id"
          in: "path"
          description: "Id of employee to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Employee found"
          schema:
            $ref: "#/definitions/EmployeeResponse"
        404:
          description: "Employee not found"

    put:
      tags:
        - "employees"
      summary: "Updates an existing employee"
      parameters:
      - name: "id"
        in: "path"
        description: "Employee id to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Employee object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/EmployeeRequest"
      responses:
        204:
          description: "Employee has been updated successfully"
        404:
          description: "Employee not found"
        405:
          description: "Validation exception"

    delete:
      tags:
      - "employees"
      summary: "Deletes an active employee"
      parameters:
      - name: "api_key"
        in: "header"
        description: "Authentication"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        description: "Employee id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "Employee has been deleted successfully"
        401:
          description: "User is not authenticated"
          schema:
            $ref: '#/definitions/UnauthorizedError'
        404:
          description: "Employee not found"
        405:
          description: "Validation exception"
      security:
        - basicAuth: []

securityDefinitions:
  basicAuth:
    type: basic

definitions:
  EmployeeRequest:
    type: "object"
    required:
      - "firstName"
      - "lastName"
      - "dateOfBirth"
      - "dateOfEmployment"
    properties:
      firstName:
        type: "string"
        maxLength: 50
      middleInitial:
        type: "string"
        maxLength: 1
      lastName:
        type: "string"
        maxLength: 50
      dateOfBirth:
        type: "string"
        format: "date"
      dateOfEmployment:
        type: "string"
        format: "date"

  EmployeeResponse:
    type: "object"
    required:
      - "id"
      - "firstName"
      - "lastName"
      - "dateOfBirth"
      - "dateOfEmployment"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
        maxLength: 50
      middleInitial:
        type: "string"
        maxLength: 1
      lastName:
        type: "string"
        maxLength: 50
      dateOfBirth:
        type: "string"
        format: "date"
      dateOfEmployment:
        type: "string"
        format: "date"

  EmployeePageableResponse:
    type: "object"
    properties:
      content:
        type: "array"
        items: 
          $ref: "#/definitions/EmployeeResponse"
      pageable:
        type: "object"
        properties:
          offset:
            type: "integer"
            format: "int64"
          pageNumber:
            description: "current page"
            type: "integer"
            format: "int32"
          pageSize:
            type: "integer"
            format: "int32"
          sort:
            type: "object"
            properties:
              sorted:
                type: "boolean"
      totalElements:
        description: "total number of elements"
        type: "integer"
        format: "int64"
      totalPages:
        description: "total number of pages"
        type: "integer"
        format: "int64"
      last:
        description: "whether it is the last page"
        type: "boolean"
      first:
        description: "whether it is the first page"
        type: "boolean"
      empty:
        description: "whether 'content' is empty"
        type: "boolean"
      size:
        description: "page size"
        type: "integer"
        format: "int32"
      number:
        description: "current page"
        type: "integer"
        format: "int32"

  UnauthorizedError:
    description: "User is not authenticated"

  ApiErrorResponse:
    description: "Errors might occur"
    type: "object"
    properties:
      errors:
        type: "array"
        items:
          type: object
          properties:
            message: 
              description: "Some more details"
              type: "string"
    